/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// main.ts
var main_exports = {};
__export(main_exports, {
  BalanceAssetCount: () => BalanceAssetCount,
  BalanceEquityCount: () => BalanceEquityCount,
  BalanceLiabCount: () => BalanceLiabCount,
  CashFlowFinancing: () => CashFlowFinancing,
  CashFlowInvesting: () => CashFlowInvesting,
  CashFlowOpration: () => CashFlowOpration,
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// view.ts
var import_obsidian = require("obsidian");
var FS_VIEW_TYPE = "fs-view";
function removeAllSpaces(s) {
  return s.replace(/(?:[^\)\]\:#\-]) +| +$/g, (t) => t.replace(/ +/g, ""));
}
async function checkAndCreateFolder(vault, folderpath) {
  folderpath = (0, import_obsidian.normalizePath)(folderpath);
  const folder = vault.getAbstractFileByPath(folderpath);
  if (folder && folder instanceof import_obsidian.TFolder) {
    return;
  }
  await vault.createFolder(folderpath);
}
var FSView = class extends import_obsidian.ItemView {
  constructor(leaf, _plugin) {
    super(leaf);
    __publicField(this, "plugin");
    this.plugin = _plugin;
  }
  comN(x) {
    if (this.plugin.settings.ComaSep) {
      return this.plugin.settings.Currency + Math.abs(x).toLocaleString("en-US", { minimumFractionDigits: this.plugin.settings.NumberOfDec });
    } else {
      return this.plugin.settings.Currency + Math.abs(x).toFixed(this.plugin.settings.NumberOfDec);
    }
  }
  formatCashFlow() {
    let dec = this.plugin.settings.NumberOfDec;
    let data = `---
${(0, import_obsidian.stringifyYaml)(this.plugin.settings)}
---
`;
    data += `#CashFlow #${removeAllSpaces(this.plugin.settings.CompanyName)} `;
    if (this.plugin.settings.QorA === "Q") {
      data += `#FY${this.plugin.settings.yearStart}_${Number(this.plugin.settings.yearStart) + 1}${this.plugin.settings.quarter}

`;
      data += `### Cash Flow Sheet Calculated Quarterly, ${this.plugin.settings.quarter} 

 `;
    } else {
      data += `#FY${this.plugin.settings.yearStart}_${Number(this.plugin.settings.yearStart) + 1}

`;
      data += `### Cash Flow Sheet Calculated Annually 

 `;
    }
    data += "# Cahs Flow From Operations:\n";
    let Osum = 0;
    for (let i = 0; i < CashFlowOpration; i++) {
      data += `${this.plugin.settings.cashFlowOperation[i].name}			${this.comN(this.plugin.settings.cashFlowOperation[i].value)}
`;
      Osum += Number(this.plugin.settings.cashFlowOperation[i].value);
    }
    data += "\n---\n";
    data += `# Total Cash from Operating Activiteis:			${this.comN(Osum)}

`;
    data += "\n\n\n";
    data += "# Cash Flow From Investing:\n";
    let Isum = 0;
    for (let i = 0; i < CashFlowInvesting; i++) {
      data += `${this.plugin.settings.cashFlowInvesting[i].name}			${this.comN(this.plugin.settings.cashFlowInvesting[i].value)}
`;
      Isum += Number(this.plugin.settings.cashFlowInvesting[i].value);
    }
    data += "\n---\n";
    data += `# Total Cash from Investing Activiteis:			${this.comN(Isum)}

`;
    data += "\n\n\n";
    data += "# Cash Flow From Financing:\n";
    let Fsum = 0;
    for (let i = 0; i < CashFlowFinancing; i++) {
      data += `${this.plugin.settings.cashFlowFinancing[i].name}			${this.comN(this.plugin.settings.cashFlowFinancing[i].value)}
`;
      Fsum += Number(this.plugin.settings.cashFlowFinancing[i].value);
    }
    data += "\n---\n";
    data += `# Total Cash from Financing Activiteis:			${this.comN(Fsum)}

`;
    data += "\n\n\n";
    data += "\n---\n";
    data += "\n---\n\n";
    data += `# Total Cash from Operating Activiteis:			${this.comN(Osum)}
`;
    data += `# Total Cash from Investing Activiteis:			${this.comN(Isum)}
`;
    data += `# Total Cash from Financing Activiteis:			${this.comN(Fsum)}
`;
    data += "\n---\n";
    data += `# Total Change in Cash:			${this.comN(Osum + Isum + Fsum)}

`;
    return data;
  }
  formatBalanceSheet() {
    let dec = this.plugin.settings.NumberOfDec;
    let data = `---
${(0, import_obsidian.stringifyYaml)(this.plugin.settings)}
---
`;
    data += `#IncomeStatemeent #${removeAllSpaces(this.plugin.settings.CompanyName)} `;
    let sum = 0;
    if (this.plugin.settings.QorA === "Q") {
      data += `#FY${this.plugin.settings.yearStart}_${Number(this.plugin.settings.yearStart) + 1}${this.plugin.settings.quarter}

`;
      data += `### Balance Sheet Calculated Quarterly, ${this.plugin.settings.quarter} 

 `;
    } else {
      data += `#FY${this.plugin.settings.yearStart}_${Number(this.plugin.settings.yearStart) + 1}

`;
      data += `### Balance Sheet Calculated Annually 

 `;
    }
    data += "# Assets:\n";
    for (let i = 0; i < BalanceAssetCount; i++) {
      data += `${this.plugin.settings.balanceAsset[i].name}			${this.comN(this.plugin.settings.balanceAsset[i].value)}
`;
      sum += Number(this.plugin.settings.balanceAsset[i].value);
      if (i === 4) {
        data += "\n---\n";
        data += `# Total Current Assets:			${this.comN(sum)}

`;
      }
    }
    data += "\n---\n";
    data += `# Total Assets:			${this.comN(sum)}

`;
    data += "\n\n\n";
    data += "# Liabilities:\n";
    sum = 0;
    for (let i = 0; i < BalanceLiabCount; i++) {
      data += `${this.plugin.settings.balanceLiab[i].name}			${this.comN(this.plugin.settings.balanceLiab[i].value)}
`;
      sum += Number(this.plugin.settings.balanceLiab[i].value);
      if (i === 4) {
        data += "\n---\n";
        data += `# Total Current Liabilities:			${this.comN(sum)}

`;
      }
    }
    data += "\n---\n";
    data += `# Total Liabilities:			${this.comN(sum)}

`;
    data += "\n\n\n";
    data += "# Shareholders' Equity:\n";
    let Esum = 0;
    for (let i = 0; i < BalanceEquityCount; i++) {
      data += `${this.plugin.settings.balanceLiab[i].name}			${this.comN(this.plugin.settings.balanceLiab[i].value)}
`;
      Esum += Number(this.plugin.settings.balanceLiab[i].value);
    }
    data += "\n---\n";
    data += `# Total Shareholders' Equity:			${this.comN(Esum)}

`;
    data += "\n\n\n";
    data += "\n---\n";
    data += `# Total Liabilities & Shareholders' Equity:			${this.comN(Number(Esum) + Number(sum))}

`;
    return data;
  }
  formatIncomeStatement() {
    let dec = this.plugin.settings.NumberOfDec;
    let data = `---
${(0, import_obsidian.stringifyYaml)(this.plugin.settings)}
---
`;
    data += `#IncomeStatemeent #${removeAllSpaces(this.plugin.settings.CompanyName)} `;
    if (this.plugin.settings.QorA === "Q") {
      data += `#FY${this.plugin.settings.yearStart}_${Number(this.plugin.settings.yearStart) + 1}${this.plugin.settings.quarter}

`;
      data += `### Income Statement Calculated Quarterly, ${this.plugin.settings.quarter} 

 `;
    } else {
      data += `#FY${this.plugin.settings.yearStart}_${Number(this.plugin.settings.yearStart) + 1}

`;
      data += `### Income Statement Calculated Annually 

 `;
    }
    data += `
# Revenue --------		  ${this.comN(this.plugin.settings.Revenue)}`;
    let COGSm = this.plugin.settings.CostOfGoodsServSold / this.plugin.settings.Revenue * 100;
    data += `
  COGS    --------		(  ${this.comN(this.plugin.settings.CostOfGoodsServSold)} ) [-%${this.comN(COGSm)}]`;
    let gp = this.plugin.settings.Revenue - this.plugin.settings.CostOfGoodsServSold;
    let gpm = gp / this.plugin.settings.Revenue * 100;
    data += `

---
`;
    if (gp >= 0) {
      data += `
# Gross Profit --------		  ${this.comN(gp)} [%${this.comN(gpm)}]`;
    } else {
      data += `
# Gross Profit --------		 ( ${this.comN(gp)} )  [-%${this.comN(gpm)}]`;
    }
    let sgam = this.plugin.settings.SGA / this.plugin.settings.Revenue * 100;
    let rndm = this.plugin.settings.RnD / this.plugin.settings.Revenue * 100;
    let depm = this.plugin.settings.Depreciation / this.plugin.settings.Revenue * 100;
    let COA = Number(this.plugin.settings.SGA) + Number(this.plugin.settings.RnD) + Number(this.plugin.settings.Depreciation);
    let COAm = COA / this.plugin.settings.Revenue * 100;
    data += `


# Cost Of Operations				( ${this.comN(COA)} ) [-%${this.comN(COAm)}]`;
    data += `
   Selling, General & Admin --------		( ${this.comN(this.plugin.settings.SGA)} )  [-%${this.comN(sgam)}]`;
    data += `
   Research & Development   --------		 ( ${this.comN(this.plugin.settings.RnD)} )  [-%${this.comN(rndm)}]`;
    data += `
   Depreciation             --------		 ( ${this.comN(this.plugin.settings.Depreciation)} )  [-%${this.comN(depm)}]`;
    let OperProfit = gp - COA;
    let OperProfitm = OperProfit / this.plugin.settings.Revenue * 100;
    if (OperProfit < 0) {
      data += `
# Operation Profit          --------		 ( ${this.comN(OperProfit)} )  [-%${this.comN(OperProfitm)}]`;
    } else {
      data += `
# Operation Profit          --------		 ${this.comN(OperProfit)}  [%${this.comN(OperProfitm)}]`;
    }
    let IEm = this.plugin.settings.IntrestExpense / this.plugin.settings.Revenue * 100;
    data += `
# Interest Expense          --------		 ( ${this.comN(this.plugin.settings.IntrestExpense)} )  [-%${this.comN(IEm)}]`;
    let glsam = this.plugin.settings.GainLossSalesAssets / this.plugin.settings.Revenue * 100;
    if (this.plugin.settings.GainLossSalesAssets > 0) {
      data += `
# Gain(Loss) Sale Assets    --------		${this.comN(this.plugin.settings.GainLossSalesAssets)} [%${this.comN(glsam)}]`;
    } else {
      data += `
# Gain(Loss) Sale Assets    --------		( ${this.comN(this.plugin.settings.GainLossSalesAssets)} )  [-%${this.comN(glsam)}]`;
    }
    let otherm = this.plugin.settings.Other / this.plugin.settings.Revenue * 100;
    data += `
# Other					   --------		 ( ${this.comN(this.plugin.settings.Other)} )  [-%${this.comN(otherm)}]`;
    data += `

---
`;
    let IBT = OperProfit - this.plugin.settings.IntrestExpense - this.plugin.settings.GainLossSalesAssets - this.plugin.settings.Other;
    let IBTm = IBT / this.plugin.settings.Revenue * 100;
    if (IBT > 0) {
      data += `
# Income Before Tax         --------		 ${this.comN(IBT)} [%${this.comN(IBTm)}]`;
    } else {
      data += `
# Income Before Tax         --------		 ( ${this.comN(IBT)} )  [-%${this.comN(IBTm)}]`;
    }
    let ITP = 0;
    let ITPm = 0;
    if (IBT > 0) {
      ITP = IBT * this.plugin.settings.TaxRate / 100;
      ITPm = ITP / this.plugin.settings.Revenue * 100;
    }
    data += `
# Income Taxes Paid         --------		 ${this.comN(ITP)} [%${this.comN(ITPm)}]`;
    data += `

---
`;
    let Net = IBT - ITP;
    let Netm = Net / this.plugin.settings.Revenue * 100;
    if (Net > 0) {
      data += `
# Net Earnings         	   --------		 ${this.comN(Net)} [%${this.comN(Netm)}]`;
    } else {
      data += `
# Net Earnings         	   --------		 ( ${this.comN(Net)} )  [-%${this.comN(Netm)}]`;
    }
    return data;
  }
  async createNewNote(folder, inputName, data) {
    const name = inputName || "Untitled";
    const fileName = `${folder}/${name}.md`;
    try {
      const fileExists = await this.plugin.app.vault.adapter.exists(fileName);
      if (fileExists) {
        throw new Error(`${name} file already exists in ${fileName}`);
      }
      const file = await this.plugin.app.vault.create(fileName, data);
      let myLeaf = this.plugin.app.workspace.getLeaf("split", "vertical");
      await myLeaf.openFile(file);
    } catch (error) {
      new import_obsidian.Notice(error.toString());
    }
  }
  fsclickedBalance() {
    console.log("Clicked on Balance sheet");
    this.plugin.loadSettings();
    checkAndCreateFolder(this.plugin.app.vault, this.plugin.settings.RootFolder);
    const subFold = `${this.plugin.settings.RootFolder}/${this.plugin.settings.CompanyName}`;
    checkAndCreateFolder(this.plugin.app.vault, subFold);
    if (this.plugin.settings.QorA === "Q") {
      this.createNewNote(subFold, `BalanceSheet_FY` + this.plugin.settings.yearStart + "_" + (Number(this.plugin.settings.yearStart) + 1).toString() + this.plugin.settings.quarter, this.formatBalanceSheet());
    } else {
      this.createNewNote(subFold, `BalanceSheet_FY` + this.plugin.settings.yearStart + "_" + (Number(this.plugin.settings.yearStart) + 1).toString(), this.formatBalanceSheet());
    }
  }
  fsclickedCash() {
    console.log("Clicked on Cashflow sheet");
    this.plugin.loadSettings();
    checkAndCreateFolder(this.plugin.app.vault, this.plugin.settings.RootFolder);
    const subFold = `${this.plugin.settings.RootFolder}/${this.plugin.settings.CompanyName}`;
    checkAndCreateFolder(this.plugin.app.vault, subFold);
    if (this.plugin.settings.QorA === "Q") {
      this.createNewNote(subFold, `ChashFlow_FY` + this.plugin.settings.yearStart + "_" + (Number(this.plugin.settings.yearStart) + 1).toString() + this.plugin.settings.quarter, this.formatCashFlow());
    } else {
      this.createNewNote(subFold, `ChashFlow_FY` + this.plugin.settings.yearStart + "_" + (Number(this.plugin.settings.yearStart) + 1).toString(), this.formatCashFlow());
    }
  }
  fsclicked() {
    this.plugin.loadSettings();
    checkAndCreateFolder(this.plugin.app.vault, this.plugin.settings.RootFolder);
    const subFold = `${this.plugin.settings.RootFolder}/${this.plugin.settings.CompanyName}`;
    checkAndCreateFolder(this.plugin.app.vault, subFold);
    if (this.plugin.settings.QorA === "Q") {
      this.createNewNote(subFold, `IncomeStatement_FY` + this.plugin.settings.yearStart + "_" + (Number(this.plugin.settings.yearStart) + 1).toString() + this.plugin.settings.quarter, this.formatIncomeStatement());
    } else {
      this.createNewNote(subFold, `IncomeStatement_FY` + this.plugin.settings.yearStart + "_" + (Number(this.plugin.settings.yearStart) + 1).toString(), this.formatIncomeStatement());
    }
  }
  getViewType() {
    return FS_VIEW_TYPE;
  }
  getDisplayText() {
    return "Financial Statement";
  }
  async onOpen() {
    this.display();
  }
  display() {
    const { contentEl } = this;
    this.plugin.loadSettings();
    contentEl.empty();
    contentEl.createEl("h2", { text: "Financial Statements Settings:" });
    new import_obsidian.Setting(contentEl).setName("Company Name").setDesc("Enter Company Name to generate FS").addText((text) => text.setPlaceholder("Company/Idea Name").setValue(this.plugin.settings.CompanyName).onChange(async (value) => {
      console.log("Company Name: " + value);
      this.plugin.settings.CompanyName = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(contentEl).setName("Start Fiscal Year").setDesc("Enter the inancial starting fiscal year").addText((text) => text.setPlaceholder("2023").setValue(this.plugin.settings.yearStart).onChange(async (value) => {
      console.log("yearStart: " + value);
      this.plugin.settings.yearStart = value;
      await this.plugin.saveSettings();
    }));
    if (this.plugin.settings.QorA === "Q") {
      new import_obsidian.Setting(contentEl).setName("Quarter").setDesc("Select the quarter").addDropdown((dropdown) => dropdown.addOption("Q1", "Q1 Apr to Jun").addOption("Q2", "Q2 Jul to Sep").addOption("Q3", "Q3 Oct to Dec").addOption("Q4", "Q4 Jan to Mar").setValue(this.plugin.settings.quarter).onChange(async (value) => {
        this.plugin.settings.quarter = value;
        await this.plugin.saveSettings();
      }));
    }
    const IncomeSt = contentEl.createEl("div", { cls: "book" });
    IncomeSt.createEl("div", { text: "Income Statemens:", cls: "book__title" });
    new import_obsidian.Setting(IncomeSt).setName("Revenue").setDesc("Enter Revenue").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.Revenue).onChange(async (value) => {
      console.log("Revenue: " + value);
      this.plugin.settings.Revenue = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(IncomeSt).setName("COR").setDesc("Enter Cost Of Goods Or Servives Sold").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.CostOfGoodsServSold).onChange(async (value) => {
      console.log("COR: " + value);
      this.plugin.settings.CostOfGoodsServSold = value;
      await this.plugin.saveSettings();
    }));
    IncomeSt.createEl("h4", { text: "Cost Of Operations:" });
    new import_obsidian.Setting(IncomeSt).setName("SGA").setDesc("Enter Cost Of Sales, Genrals and Administration").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.SGA).onChange(async (value) => {
      console.log("SGA: " + value);
      this.plugin.settings.SGA = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(IncomeSt).setName("R&D").setDesc("Enter Cost Of R&D").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.RnD).onChange(async (value) => {
      console.log("Rnd: " + value);
      this.plugin.settings.RnD = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(IncomeSt).setName("Depreciation").setDesc("Enter amount of Depreciation").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.Depreciation).onChange(async (value) => {
      console.log("Depreciation: " + value);
      this.plugin.settings.Depreciation = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(IncomeSt).setName("Intrest Expense").setDesc("Enter amount of IntrestExpense").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.IntrestExpense).onChange(async (value) => {
      console.log("IntrestExpense: " + value);
      this.plugin.settings.IntrestExpense = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(IncomeSt).setName("Gain(Loss) Sales of Assets").setDesc("Enter amount of Gain(-Loss) of Sales of Assets").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.GainLossSalesAssets).onChange(async (value) => {
      console.log("GainLossSalesAssets: " + value);
      this.plugin.settings.GainLossSalesAssets = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(IncomeSt).setName("Other").setDesc("Enter amount of Other gains(-loss)").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.Other).onChange(async (value) => {
      console.log("Other: " + value);
      this.plugin.settings.Other = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(IncomeSt).setName("Tax Rate %").setDesc("Enter amount of Tax in %").addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.TaxRate).onChange(async (value) => {
      console.log("TaxRate: " + value);
      this.plugin.settings.TaxRate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(IncomeSt).setName("Generate Income Statement").setDesc("Will generate Income statement, and can be edited later on").addButton((ButtonComponent) => ButtonComponent.setButtonText("Generate").onClick(async () => {
      this.fsclicked();
    }));
    const BalanceSt = contentEl.createEl("div", { cls: "book" });
    BalanceSt.createEl("div", { text: "Balance Sheet", cls: "book__title" });
    const BalanceStAsset = BalanceSt.createEl("div", { cls: "book" });
    BalanceStAsset.createEl("div", { text: "Assets", cls: "book__title" });
    for (let i = 0; i < BalanceAssetCount; i++) {
      new import_obsidian.Setting(BalanceStAsset).setName(this.plugin.settings.balanceAsset[i].name).setDesc(this.plugin.settings.balanceAsset[i].description).addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.balanceAsset[i].value).onChange(async (value) => {
        console.log(this.plugin.settings.balanceAsset[i].name + ": " + value);
        this.plugin.settings.balanceAsset[i].value = value;
        await this.plugin.saveSettings();
      }));
    }
    const BalanceStLiab = BalanceSt.createEl("div", { cls: "book" });
    BalanceStLiab.createEl("div", { text: "Liabilities", cls: "book__title" });
    for (let i = 0; i < BalanceLiabCount; i++) {
      new import_obsidian.Setting(BalanceStLiab).setName(this.plugin.settings.balanceLiab[i].name).setDesc(this.plugin.settings.balanceLiab[i].description).addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.balanceLiab[i].value).onChange(async (value) => {
        console.log(this.plugin.settings.balanceLiab[i].name + ": " + value);
        this.plugin.settings.balanceLiab[i].value = value;
        await this.plugin.saveSettings();
      }));
    }
    const BalanceStEquity = BalanceSt.createEl("div", { cls: "book" });
    BalanceStEquity.createEl("div", { text: "Equity", cls: "book__title" });
    for (let i = 0; i < BalanceEquityCount; i++) {
      new import_obsidian.Setting(BalanceStEquity).setName(this.plugin.settings.balanceEquiq[i].name).setDesc(this.plugin.settings.balanceEquiq[i].description).addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.balanceEquiq[i].value).onChange(async (value) => {
        console.log(this.plugin.settings.balanceEquiq[i].name + ": " + value);
        this.plugin.settings.balanceEquiq[i].value = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian.Setting(BalanceSt).setName("Generate Balance Sheet").setDesc("Will generate Balance Sheet, and can be edited later on").addButton((ButtonComponent) => ButtonComponent.setButtonText("Generate").onClick(async () => {
      this.fsclickedBalance();
    }));
    const CashFSt = contentEl.createEl("div", { cls: "book" });
    CashFSt.createEl("div", { text: "Cash Flow Statement", cls: "book__title" });
    const CashOper = CashFSt.createEl("div", { cls: "book" });
    CashOper.createEl("div", { text: "Operation Activities:", cls: "book__title" });
    for (let i = 0; i < CashFlowOpration; i++) {
      new import_obsidian.Setting(CashOper).setName(this.plugin.settings.cashFlowOperation[i].name).setDesc(this.plugin.settings.cashFlowOperation[i].description).addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.cashFlowOperation[i].value).onChange(async (value) => {
        console.log(this.plugin.settings.cashFlowOperation[i].name + ": " + value);
        this.plugin.settings.cashFlowOperation[i].value = value;
        await this.plugin.saveSettings();
      }));
    }
    const CashInvest = CashFSt.createEl("div", { cls: "book" });
    CashInvest.createEl("div", { text: "Investing Activities:", cls: "book__title" });
    for (let i = 0; i < CashFlowInvesting; i++) {
      new import_obsidian.Setting(CashInvest).setName(this.plugin.settings.cashFlowInvesting[i].name).setDesc(this.plugin.settings.cashFlowInvesting[i].description).addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.cashFlowInvesting[i].value).onChange(async (value) => {
        console.log(this.plugin.settings.cashFlowInvesting[i].name + ": " + value);
        this.plugin.settings.cashFlowInvesting[i].value = value;
        await this.plugin.saveSettings();
      }));
    }
    const CashFinanc = CashFSt.createEl("div", { cls: "book" });
    CashFinanc.createEl("div", { text: "Financing Activities:", cls: "book__title" });
    for (let i = 0; i < CashFlowFinancing; i++) {
      new import_obsidian.Setting(CashFinanc).setName(this.plugin.settings.cashFlowFinancing[i].name).setDesc(this.plugin.settings.cashFlowFinancing[i].description).addText((Number2) => Number2.setPlaceholder("0").setValue(this.plugin.settings.cashFlowFinancing[i].value).onChange(async (value) => {
        console.log(this.plugin.settings.cashFlowFinancing[i].name + ": " + value);
        this.plugin.settings.cashFlowFinancing[i].value = value;
        await this.plugin.saveSettings();
      }));
    }
    new import_obsidian.Setting(CashFSt).setName("Generate Cash Flow Sheet").setDesc("Will generate Cash Flow Sheet, and can be edited later on").addButton((ButtonComponent) => ButtonComponent.setButtonText("Generate").onClick(async () => {
      this.fsclickedCash();
    }));
  }
};

// settings.ts
var import_obsidian2 = require("obsidian");
var SampleSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Financial Statements Settings:" });
    new import_obsidian2.Setting(containerEl).setName("Statements Timing").setDesc("Enter either quaterly of Anually").addDropdown((dropdown) => dropdown.addOption("A", "Anualy Calculated").addOption("Q", "Quarterly Calculated").setValue(this.plugin.settings.QorA).onChange(async (value) => {
      this.plugin.settings.QorA = value;
      await this.plugin.saveSettings();
      this.plugin.refresh();
    }));
    new import_obsidian2.Setting(containerEl).setName("Root folder name").setDesc("Currently set as __FS__").addText((text) => text.setPlaceholder("__FS__").setValue(this.plugin.settings.RootFolder).onChange(async (value) => {
      console.log("RootFolder: " + value);
      this.plugin.settings.RootFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Currency").setDesc("set the Currency").addText((text) => text.setPlaceholder("$").setValue(this.plugin.settings.Currency).onChange(async (value) => {
      console.log("Currency: " + value);
      this.plugin.settings.Currency = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Decimials").setDesc("set the number of decimals").addText((Number2) => Number2.setPlaceholder("2").setValue(this.plugin.settings.NumberOfDec).onChange(async (value) => {
      console.log("NumberOfDec: " + value);
      this.plugin.settings.NumberOfDec = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("ComaSep").setDesc("if amount is spereated with comas").addToggle((toggle) => toggle.setValue(this.plugin.settings.ComaSep).onChange(async (value) => {
      this.plugin.settings.ComaSep = value;
      await this.plugin.saveSettings();
    }));
  }
};

// main.ts
var BalanceAssetCount = 11;
var BalanceLiabCount = 9;
var BalanceEquityCount = 6;
var CashFlowOpration = 3;
var CashFlowInvesting = 2;
var CashFlowFinancing = 3;
var DEFAULT_SETTINGS = {
  CompanyName: "Idea",
  Revenue: 0,
  CostOfGoodsServSold: 0,
  RnD: 0,
  SGA: 0,
  Depreciation: 0,
  IntrestExpense: 0,
  GainLossSalesAssets: 0,
  Other: 0,
  TaxRate: 0.05,
  QorA: "A",
  IncomeFolder: "__Income__",
  BalanceFolder: "__Balance__",
  CashFolder: "__CashFlow__",
  Currency: "$",
  NumberOfDec: 2,
  ComaSep: true,
  RootFolder: "__FS__",
  yearStart: 2023,
  quarter: "Q1",
  balanceAsset: [
    { "value": 0, "name": "Cash & Short-Term Investments", "description": "Is the equivalent of cash, such as a short-term CD at the bank, three-month Treasuries, or other highly liquid assets." },
    { "value": 0, "name": "Total Inventory", "description": "Is the company's products that it has warehoused to sell to its vendors. Since a balance sheet is always for a specific day, the amount found on the balance sheet for inventory is the value of the company's inventory for that date." },
    { "value": 0, "name": "Total Receivables, Net", "description": "When a company sells its products to a purchaser, it does so on the basis of either cash up front or payment due thirty days after the purchaser receives the goods. In some businesses the cash isn't due for even longer periods. Sales in this state of limbo, where the cash is due, are called receivables." },
    { "value": 0, "name": "Prepaid Expenses", "description": "Businesses sometimes pay for goods and services that they will receive in the near future, although they have not yet taken possession of the goods or received the benefits of the service." },
    { "value": 0, "name": "Other Current Assets, Total", "description": "Are non-cash assets that are due within the year but are not as yet in the company's hands. These include such things as deferred income tax recoveries, which are due within the year, but aren't cash in hand just yet." },
    { "value": 0, "name": "Property/Plant/Equipment", "description": "A company's property, its manufacturing plant and equipment, and their collective value are carried on the balance sheet as an asset. They are carried at their original cost, less accumulated depreciation. Depreciation is what occurs as the plant and equipment wear out little by little; every year, a charge is taken against the plant and equipment." },
    { "value": 0, "name": "Goodwill, Net", "description": "When Comp. A buys XYZ  company and Comp. A pays a price in excess of XYZ's book value, the excess is recorded on Comp. A's balance sheet under the heading of Goodwill." },
    { "value": 0, "name": "Intangibles, Net", "description": "Are assets we can't physically touch; these include patents, copyrights, trademarks, franchises, brand names, and the like." },
    { "value": 0, "name": "Long-Term Investments", "description": "(Longer than a year), such as stocks, bonds, and real estate is recorded." },
    { "value": 0, "name": "Other Long-Term Assets", "description": "Think of \u201Cother long-term assets\u201D as a giant pool of long-term assets\u2014assets that have useful lives of greater than a year\u2014that didn't make it into the categories of Property and Equipment, Goodwill, Intangibles, and Long-Term Investments." },
    { "value": 0, "name": "Other Assets", "description": "Catchall category" }
  ],
  balanceLiab: [
    { "value": 0, "name": "Accounts Payable", "description": "Is money owed to suppliers that have provided goods and services to the company on credit." },
    { "value": 0, "name": "Accrued Expenses", "description": "Liabilities that the company has incurred, but has yet to be invoiced for." },
    { "value": 0, "name": "Short-Term Debt", "description": "Is money that is owed by the corporation and due within the year. This includes commercial paper and short-term bank loans." },
    { "value": 0, "name": "Long-Term Debt Due", "description": "That is coming due and has to be paid off in the current year." },
    { "value": 0, "name": "Other Current Liabilities", "description": "Other Current Liabilities" },
    { "value": 0, "name": "Long-Term Debt", "description": "Debt that matures any time out past a year." },
    { "value": 0, "name": "Deferred Income Tax", "description": "Is tax that is due but hasn't been paid." },
    { "value": 0, "name": "Minority Interest", "description": "When Comp. A buys stocks of 80% or more of Comp. B, This represents is the value of the Percentage of a Company B that has more than 80% acquisition and dose not own from Main company A." },
    { "value": 0, "name": "Other Liabilities", "description": "Catchall category into which businesses pool their miscellaneous debt." }
  ],
  balanceEquiq: [
    { "value": 0, "name": "Preferred Stock", "description": "Preferred shareholders don't have voting rights, but they do have a right to a fixed or adjustable dividend that must be paid before the common stock owners receive a dividend." },
    { "value": 0, "name": "Common Stock", "description": "Common stock represents ownership in the company. Common stock owners are the owners of the company and have the right to elect a board of directors, which, in turn, will hire a CEO to run the company. Common stockholders receive dividends if the board of directors votes to pay them. And if the entire company is sold, it is the common stockholders who get all the loot." },
    { "value": 0, "name": "Additional Paid in Capital", "description": "Is the difference of par value of shares cost and what was sold to market, If Preferred stock has a par value of $100/share, and sold to the public at $120/share, $20 will be put in Paid in Capital." },
    { "value": 0, "name": "Retained Earnings", "description": "At the end of the day, a company's net earnings can either be paid out as dividends or used to buy back the company's shares, or they can be retained to keep the business growing." },
    { "value": 0, "name": "Treasury Stock\u2014Common", "description": "When a company buys back its own shares, it can do two things with them. It can cancel them or it can retain them with the possibility of reissuing them later on." },
    { "value": 0, "name": "Other Equity", "description": "Catcall category" }
  ],
  cashFlowOperation: [
    { "value": 0, "name": "Net Income", "description": "This Obtaned from Income Statement, but Cash Method." },
    { "value": 0, "name": "Depreciation", "description": "What has been detucted from Income Statemnt, since it was payed years ago." },
    { "value": 0, "name": "Amortization", "description": "What has been detucted from Income Statemnt, since it was payed years ago." }
  ],
  cashFlowInvesting: [
    { "value": 0, "name": "Capital Expenditures", "description": "For the accounting period, always in Negative, since it is a Expenditures and depletion of cash" },
    { "value": 0, "name": "Other Investing Cash Flow Items", "description": "This can be Either Positive Or Negative, if Investing brought in or sent out." }
  ],
  cashFlowFinancing: [
    { "value": 0, "name": "Cash Dividends Paid", "description": "Cash that has been paid to Stock owners" },
    { "value": 0, "name": "Issuane (Retirement) of Stock, Net", "description": "Selling or Buying of company's Stock." },
    { "value": 0, "name": "Issuance (Retirement) of Debt, Net", "description": "Selling or Buying of company's Bonds." }
  ]
};
var MyPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
  }
  async openView() {
    this.app.workspace.detachLeavesOfType(FS_VIEW_TYPE);
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: FS_VIEW_TYPE,
      active: true
    });
    this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType(FS_VIEW_TYPE)[0]);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  refresh() {
    this.openView();
  }
  async onload() {
    await this.loadSettings();
    this.registerView(FS_VIEW_TYPE, (leaf) => new FSView(leaf, this));
    const ribbonIconEl = this.addRibbonIcon("sheets-in-box", "Financial Statement", (evt) => {
      this.openView();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new SampleSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
};
var SampleModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
